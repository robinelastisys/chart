{{- range $namespace, $services := .Values.constraints }}
{{- range $name, $value := $services }}
{{- if get $value.allow "readOnlyRootFilesystem" }}
---
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: {{ printf "read-only-root-%s-%s-container" $.Release.Namespace $name | trunc 63 }}
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: ["*"]
        kinds: ["Pod"]
    namespaces:
      - {{ $namespace }}
    labelSelector:
      matchLabels:
        {{- toYaml $value.podSelectorLabels | nindent 8 }}
  location: "spec.containers[name: *].securityContext.readOnlyRootFilesystem"
  parameters:
    assign:
      value: true
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.readOnlyRootFilesystem"
        condition: MustNotExist
---
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: {{ printf "read-only-root-%s-%s-ephemeral" $.Release.Namespace $name | trunc 63 }}
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: ["*"]
        kinds: ["Pod"]
    namespaces:
      - {{ $namespace }}
    labelSelector:
      matchLabels:
        {{- toYaml $value.podSelectorLabels | nindent 8 }}
  location: "spec.ephemeralContainers[name: *].securityContext.readOnlyRootFilesystem"
  parameters:
    assign:
      value: true
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.readOnlyRootFilesystem"
        condition: MustNotExist
---
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: {{ printf "read-only-root-%s-%s-init" $.Release.Namespace $name | trunc 63 }}
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    {{- dict "namespace" $namespace "labels" $value.podSelectorLabels | include "podsecuritypolicies.renderMatchInclusion" | nindent 4 }}
  location: "spec.initContainers[name: *].securityContext.readOnlyRootFilesystem"
  parameters:
    assign:
      value: true
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.readOnlyRootFilesystem"
        condition: MustNotExist
{{- end }}
{{- end }}
{{- end }}
